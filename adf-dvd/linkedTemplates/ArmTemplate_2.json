{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-dvd"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_reorder_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "REORDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATE_LOW",
						"type": "date"
					},
					{
						"name": "DATE_REORDERED",
						"type": "date"
					},
					{
						"name": "QUAN_LOW",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUAN_REORDERED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATE_EXPECTED",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "reorder"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dynamicinputpostresql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dynamicinput_postgresql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FileName",
						"container": "dynamicinputpostgresql"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/inventory_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "inventory"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/login_information_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "login_information"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_lines_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "order_lines"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/orders_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "orders"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/products_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "products"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/reorder_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "reorder"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "S_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FIRST_NAME",
						"type": "varchar"
					},
					{
						"name": "LAST_NAME",
						"type": "varchar"
					},
					{
						"name": "ADDRESS1",
						"type": "varchar"
					},
					{
						"name": "ADDRESS2",
						"type": "varchar"
					},
					{
						"name": "CITY",
						"type": "varchar"
					},
					{
						"name": "STATE",
						"type": "varchar"
					},
					{
						"name": "ZIP",
						"type": "int",
						"precision": 10
					},
					{
						"name": "COUNTRY",
						"type": "varchar"
					},
					{
						"name": "REGION",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "EMAIL",
						"type": "varchar"
					},
					{
						"name": "PHONE",
						"type": "varchar"
					},
					{
						"name": "CREDIT_CARD_TYPE",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CREDIT_CARD_NUMBER",
						"type": "varchar"
					},
					{
						"name": "CREDIT_CARD_EXPIRATION",
						"type": "varchar"
					},
					{
						"name": "USER_NAME",
						"type": "varchar"
					},
					{
						"name": "PASSWORD",
						"type": "varchar"
					},
					{
						"name": "DATE_OF_BIRTH",
						"type": "date"
					},
					{
						"name": "INCOME",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GENDER",
						"type": "varchar"
					},
					{
						"name": "AGE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AGE_BUCKETS",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "CURRENT_RECORD_INDICATOR",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_customers"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "S_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CATEGORY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "TITLE",
						"type": "varchar"
					},
					{
						"name": "ACTOR",
						"type": "varchar"
					},
					{
						"name": "PRICE",
						"type": "varchar"
					},
					{
						"name": "SPECIAL",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMON_PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUAN_IN_STOCK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SALES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_products"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/storagepowerquery')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputpowerquery"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetDataDynamically')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource",
								"query": {
									"value": "SELECT * FROM dvd_store_db.INFORMATION_SCHEMA.TABLES WHERE table_type = 'BASE TABLE' AND table_schema = 'oltp_ds2'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "PostgreSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Postgresql_dynamic_copy",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().table_schema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTableforcopy",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyData_postgresql_to_srcDB_dvd')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "address_in",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_address_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-03T08:36:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/synapsecopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TABLE_SCHEMA, TABLE_NAME FROM srcDB_dvd.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN ('dim_customers','dim_products','fact_order_lines_price','fact_reorder')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_address_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTableforcopy",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureDataLakeCopyatDestination",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@concat(item().TABLE_SCHEMA,'_',item().TABLE_NAME,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMPRODUCTS_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_categories_sql",
								"type": "DatasetReference"
							},
							"name": "Categories"
						},
						{
							"dataset": {
								"referenceName": "ds_Inventory_sql",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "InsertNewRecord"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "OLDrecordCRI0"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "UpdateOldRecord"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "URECORD"
						},
						{
							"name": "selectUPDATED"
						},
						{
							"name": "select7"
						},
						{
							"name": "selectcategory"
						},
						{
							"name": "joinProductCategory"
						},
						{
							"name": "selectInventory"
						},
						{
							"name": "select8"
						},
						{
							"name": "joinProductInventory"
						},
						{
							"name": "csvProducts"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('CATEGORY_NAME,TITLE,ACTOR')\n}\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\nsource(output(\n\t\tPROD_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Products\nsource(output(\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Categories\nsource(output(\n\t\tPROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Inventory\nselect7 derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tpriceSRC = md5(PRICE),\n\t\tIntValSRC = md5(SPECIAL,COMMON_PROD_ID,QUAN_IN_STOCK,SALES)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tpriceTAR = md5(PRICE),\n\t\tIntvalTAR = md5(SPECIAL,COMMON_PROD_ID,QUAN_IN_STOCK,SALES)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(PRODUCT_ID == Tar_PRODUCT_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_PRODUCT_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC==columnhashTarget && URECORD@PRODUCT_ID==ExistingTarget@PRODUCT_ID && IntValSRC==IntvalTAR && priceSRC==priceTAR,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = /* addDays(fetch_START_DATE,0) */\r\niif(fetch_START_DATE == Tar_END_DATE, currentDate(), currentDate() + 1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = /* addDays(fetch_START_DATE,0) */\r\niif(fetch_START_DATE == Tar_END_DATE, currentDate(), currentDate() + 1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nfilter3, hashkeyTarget join(OLDRECORD@PRODUCT_ID == ExistingTarget@PRODUCT_ID\n\t&& columnhashSRC == columnhashTarget\n\t&& IntValSRC == IntvalTAR\n\t&& priceSRC == priceTAR,\n\tjoinType:'right',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@PRODUCT_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nfilter1 derive(END_DATE = /* addDays(currentDate(),0) */\r\niif(ExistingTarget@ROW_UPDATED_DATE==currentDate()+1, currentDate()+1, currentDate()),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nderivedColumn2 alterRow(updateIf(1==1)) ~> alterRow2\nURECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselectUPDATED, fetchstartdate join(PRODUCT_ID == fetch_PRODUCT_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_PRODUCT_ID = PRODUCT_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\naddSDisRUD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select5\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntValSRC,\n\t\tpriceSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntValSRC,\n\t\tpriceSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORD\nUPDATEDRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectUPDATED\ncsvProducts select(mapColumn(\n\t\tPRODUCT_ID = PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select7\nCategories select(mapColumn(\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectcategory\nProducts, selectcategory join(Products@CATEGORY_ID == selectcategory@CATEGORY_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinProductCategory\nInventory select(mapColumn(\n\t\tPROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectInventory\njoinProductCategory select(mapColumn(\n\t\tPROD_ID,\n\t\tCATEGORY_ID = Products@CATEGORY_ID,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select8\nselect8, selectInventory join(select8@PROD_ID == selectInventory@PROD_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinProductInventory\njoinProductInventory select(mapColumn(\n\t\tPROD_ID = select8@PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> csvProducts\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain\nselect5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNewRecord\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tCATEGORY_ID = ExistingTarget@CATEGORY_ID,\n\t\tCATEGORY_NAME = ExistingTarget@CATEGORY_NAME,\n\t\tTITLE = ExistingTarget@TITLE,\n\t\tACTOR = ExistingTarget@ACTOR,\n\t\tPRICE = ExistingTarget@PRICE,\n\t\tSPECIAL = ExistingTarget@SPECIAL,\n\t\tCOMMON_PROD_ID = ExistingTarget@COMMON_PROD_ID,\n\t\tQUAN_IN_STOCK = ExistingTarget@QUAN_IN_STOCK,\n\t\tSALES = ExistingTarget@SALES,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDrecordCRI0\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UpdateOldRecord"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMcustomer_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						},
						{
							"dataset": {
								"referenceName": "ds_customer_sql",
								"type": "DatasetReference"
							},
							"name": "customers"
						},
						{
							"dataset": {
								"referenceName": "ds_login_information_sql",
								"type": "DatasetReference"
							},
							"name": "LoginInformation"
						},
						{
							"dataset": {
								"referenceName": "ds_country_sql",
								"type": "DatasetReference"
							},
							"name": "Country"
						},
						{
							"dataset": {
								"referenceName": "ds_address_sql",
								"type": "DatasetReference"
							},
							"name": "Address"
						},
						{
							"dataset": {
								"referenceName": "ds_credit_card_sql",
								"type": "DatasetReference"
							},
							"name": "CreditCard"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "InsertNEWRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "UPDATEOLDRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "OLDRECORDCRI0"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "SelectNewRecord"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "URECORDS"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "selectlogininformation"
						},
						{
							"name": "joinCUSlogininformation"
						},
						{
							"name": "selectAddress"
						},
						{
							"name": "joinAddressCountry"
						},
						{
							"name": "selectcountry"
						},
						{
							"name": "joinCusAddressCountry"
						},
						{
							"name": "selectCustomerLogAddCountry"
						},
						{
							"name": "selectCreditCard"
						},
						{
							"name": "joinCusCreditcard"
						},
						{
							"name": "CSVCustomer"
						},
						{
							"name": "datatransformation"
						},
						{
							"name": "agebuckets"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER,PHONE,CREDIT_CARD_NUMBER')\n}\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tAGE as integer,\n\t\tAGE_BUCKETS as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tAGE as integer,\n\t\tAGE_BUCKETS as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> customers\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LoginInformation\nsource(output(\n\t\tCOUNTRY_CODE as integer,\n\t\tCOUNTRY_NAME as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Country\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tCOUNTRY_CODE as integer,\n\t\tZIP as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Address\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CreditCard\nagebuckets derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tcountrySRC = md5(COUNTRY_NAME),\n\t\tDOB_src = md5(DATE_OF_BIRTH),\n\t\tIntegerValuesSRC = md5(ZIP,REGION,CREDIT_CARD_TYPE,INCOME),\n\t\tRID_hash_src = md5(ROW_INSERTED_DATE),\n\t\tRUD_hash_src = md5(ROW_UPDATED_DATE)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tcountryTarget = md5(COUNTRY),\n\t\tIntegerValuesTarget = md5(ZIP,REGION,CREDIT_CARD_TYPE,INCOME),\n\t\tDOB_Tar = md5(DATE_OF_BIRTH),\n\t\tRID_Tar = md5(ROW_INSERTED_DATE),\n\t\tRUD_Tar = md5(ROW_UPDATED_DATE)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(CUSTOMER_ID == Tar_CUSTOMER_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_CUSTOMER_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\naddSDisRUD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tAGE,\n\t\tAGE_BUCKETS,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecord\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC == columnhashTarget && IntegerValuesSRC == IntegerValuesTarget &&countrySRC==countryTarget && DOB_src==DOB_Tar\n\t&& URECORDS@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\nUPDATEDRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tAGE,\n\t\tAGE_BUCKETS,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = /* addDays(fetch_START_DATE,1) */\r\n\r\niif(fetch_START_DATE == Tar_END_DATE, currentDate(), currentDate() + 1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = /* addDays(fetch_START_DATE,1) */\r\niif(fetch_START_DATE == Tar_END_DATE, currentDate(), currentDate() + 1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tAGE,\n\t\tAGE_BUCKETS,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntegerValuesSRC,\n\t\tcountrySRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nfilter3, hashkeyTarget join(OLDRECORD@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID\n\t&& columnhashSRC == columnhashTarget\n\t&& IntegerValuesSRC == IntegerValuesTarget\n\t&& countrySRC == countryTarget\n\t&& DOB_src == DOB_Tar,\n\tjoinType:'right',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@CUSTOMER_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tFIRST_NAME = ExistingTarget@FIRST_NAME,\n\t\tLAST_NAME = ExistingTarget@LAST_NAME,\n\t\tADDRESS1 = ExistingTarget@ADDRESS1,\n\t\tADDRESS2 = ExistingTarget@ADDRESS2,\n\t\tCITY = ExistingTarget@CITY,\n\t\tSTATE = ExistingTarget@STATE,\n\t\tZIP = ExistingTarget@ZIP,\n\t\tCOUNTRY,\n\t\tREGION = ExistingTarget@REGION,\n\t\tEMAIL = ExistingTarget@EMAIL,\n\t\tPHONE = ExistingTarget@PHONE,\n\t\tCREDIT_CARD_TYPE = ExistingTarget@CREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER = ExistingTarget@CREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION = ExistingTarget@CREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME = ExistingTarget@USER_NAME,\n\t\tPASSWORD = ExistingTarget@PASSWORD,\n\t\tDATE_OF_BIRTH = ExistingTarget@DATE_OF_BIRTH,\n\t\tINCOME = ExistingTarget@INCOME,\n\t\tGENDER = ExistingTarget@GENDER,\n\t\tAGE = ExistingTarget@AGE,\n\t\tAGE_BUCKETS = ExistingTarget@AGE_BUCKETS,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilter1 derive(END_DATE = /* addDays(currentDate(),0) */\r\niif(ExistingTarget@ROW_UPDATED_DATE==currentDate()+1, currentDate()+1, currentDate()),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nselect2 alterRow(updateIf(1==1)) ~> alterRow2\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tAGE,\n\t\tAGE_BUCKETS,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntegerValuesSRC,\n\t\tcountrySRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORDS\nURECORDS filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselect1, fetchstartdate join(CUSTOMER_ID == fetch_CUSTOMER_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_CUSTOMER_ID = CUSTOMER_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\nLoginInformation select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tUSER_NAME,\n\t\tPASSWORD\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectlogininformation\ncustomers, selectlogininformation join(customers@CUSTOMER_ID == selectlogininformation@CUSTOMER_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinCUSlogininformation\nAddress select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tCOUNTRY_CODE,\n\t\tZIP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectAddress\nselectAddress, selectcountry join(selectAddress@COUNTRY_CODE == selectcountry@COUNTRY_CODE,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinAddressCountry\nCountry select(mapColumn(\n\t\tCOUNTRY_CODE,\n\t\tCOUNTRY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectcountry\njoinCUSlogininformation, joinAddressCountry join(customers@CUSTOMER_ID == selectAddress@CUSTOMER_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinCusAddressCountry\njoinCusAddressCountry select(mapColumn(\n\t\tCUSTOMER_ID = customers@CUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectCustomerLogAddCountry\nCreditCard select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectCreditCard\nselectCustomerLogAddCountry, selectCreditCard join(selectCustomerLogAddCountry@CUSTOMER_ID == selectCreditCard@CUSTOMER_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinCusCreditcard\njoinCusCreditcard select(mapColumn(\n\t\tCUSTOMER_ID = selectCustomerLogAddCountry@CUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CSVCustomer\nCSVCustomer derive(GENDER = iif(GENDER==='M','Male','Female'),\n\t\tAGE = toInteger(minus(currentDate(),DATE_OF_BIRTH)/365)) ~> datatransformation\ndatatransformation derive(AGE_BUCKETS = case(AGE>=17 && AGE<=30, '17-30', AGE>=31 && AGE<=45,'31-45',AGE>=46 && AGE<=60,'46-60',AGE>=61 && AGE<=75,'61-75',AGE>=76 && AGE<=90,'76-90')) ~> agebuckets\nSelectNewRecord sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tAGE as integer,\n\t\tAGE_BUCKETS as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tAGE,\n\t\tAGE_BUCKETS,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNEWRECORD\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tAGE as integer,\n\t\tAGE_BUCKETS as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tAGE,\n\t\tAGE_BUCKETS,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UPDATEOLDRECORD\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tAGE as integer,\n\t\tAGE_BUCKETS as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tAGE,\n\t\tAGE_BUCKETS,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDRECORDCRI0\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact_order_lines_price_added')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_fact_orderlines",
								"type": "DatasetReference"
							},
							"name": "factorderlines"
						},
						{
							"dataset": {
								"referenceName": "sql_dim_products",
								"type": "DatasetReference"
							},
							"name": "dimproducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_fact_order_lines_price",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_LINE_ID as integer,",
						"          ORDER_ID as integer,",
						"          CUSTOMER_KEY as integer,",
						"          PRODUCT_KEY as integer,",
						"          QUANTITY as integer,",
						"          ORDER_DATE as date,",
						"          NET_AMOUNT as string,",
						"          TAX_MONEY as string,",
						"          TOTAL_AMOUNT as string,",
						"          ROW_INSERTED_DATE as date,",
						"          ROW_INSERTED_BY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> factorderlines",
						"source(output(",
						"          S_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          CATEGORY_ID as integer,",
						"          CATEGORY_NAME as string,",
						"          TITLE as string,",
						"          ACTOR as string,",
						"          PRICE as string,",
						"          SPECIAL as integer,",
						"          COMMON_PROD_ID as integer,",
						"          QUAN_IN_STOCK as integer,",
						"          SALES as integer,",
						"          ROW_INSERTED_DATE as date,",
						"          ROW_UPDATED_DATE as date,",
						"          ROW_INSERTED_BY as integer,",
						"          ROW_UPDATED_BY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimproducts",
						"factorderlines, dimproducts join(PRODUCT_KEY == S_KEY,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ORDER_LINE_ID,",
						"          ORDER_ID,",
						"          CUSTOMER_KEY,",
						"          PRODUCT_KEY,",
						"          QUANTITY,",
						"          ORDER_DATE,",
						"          NET_AMOUNT,",
						"          TAX_MONEY,",
						"          TOTAL_AMOUNT,",
						"          ROW_INSERTED_DATE = factorderlines@ROW_INSERTED_DATE,",
						"          ROW_INSERTED_BY = factorderlines@ROW_INSERTED_BY,",
						"          CATEGORY_NAME,",
						"          TITLE,",
						"          ACTOR,",
						"          PRICE,",
						"          QUAN_IN_STOCK,",
						"          SALES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(PRICE = round(toFloat(split(PRICE,'$')[2]),2)) ~> derivedColumn1",
						"derivedColumn1 derive(TOTAL_SALES = round(PRICE*QUANTITY,2)) ~> derivedColumn2",
						"derivedColumn2 derive(PRICE_BUCKETS = /* case(AGE>=17 && AGE<=30, '17-30', AGE>=31 && AGE<=45,'31-45',AGE>=46 && AGE<=60,'46-60',AGE>=61 && AGE<=75,'61-75',AGE>=76 && AGE<=90,'76-90') */\r",
						"case(PRICE<=10, '0-10', PRICE>10 && PRICE<=15,'10-15',PRICE>15 && PRICE<=20,'15-20',PRICE>20 && PRICE<=25,'20-25',PRICE>25 && PRICE<=30,'25-30')) ~> derivedColumn3",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ORDER_LINE_ID as integer,",
						"          ORDER_ID as integer,",
						"          CUSTOMER_KEY as integer,",
						"          PRODUCT_KEY as integer,",
						"          QUANTITY as integer,",
						"          ORDER_DATE as date,",
						"          NET_AMOUNT as string,",
						"          TAX_MONEY as string,",
						"          TOTAL_AMOUNT as string,",
						"          ROW_INSERTED_DATE as date,",
						"          ROW_INSERTED_BY as integer,",
						"          CATEGORY_NAME as string,",
						"          TITLE as string,",
						"          ACTOR as string,",
						"          PRICE as double,",
						"          QUAN_IN_STOCK as integer,",
						"          SALES as integer,",
						"          TOTAL_SALES as double,",
						"          PRICE_BUCKETS as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ORDER_LINE_ID,",
						"          ORDER_ID,",
						"          CUSTOMER_KEY,",
						"          PRODUCT_KEY,",
						"          QUANTITY,",
						"          ORDER_DATE,",
						"          NET_AMOUNT,",
						"          TAX_MONEY,",
						"          TOTAL_AMOUNT,",
						"          ROW_INSERTED_DATE,",
						"          ROW_INSERTED_BY,",
						"          CATEGORY_NAME,",
						"          TITLE,",
						"          ACTOR,",
						"          PRICE,",
						"          QUAN_IN_STOCK,",
						"          SALES,",
						"          TOTAL_SALES,",
						"          PRICE_BUCKETS",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_dim_products')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact_orderlines_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "dimCustomers"
						},
						{
							"dataset": {
								"referenceName": "ds_orders_sql",
								"type": "DatasetReference"
							},
							"name": "orders"
						},
						{
							"dataset": {
								"referenceName": "ds_orderlines_sql",
								"type": "DatasetReference"
							},
							"name": "orderlines"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "DimProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "df_fact_orderlines",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectORDERS"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "joinProductKey"
						},
						{
							"name": "CRI1Customer"
						},
						{
							"name": "CRI1Products"
						},
						{
							"name": "selectProductkey"
						},
						{
							"name": "selectCustomerkey"
						},
						{
							"name": "selectProductkeymain"
						},
						{
							"name": "joinCustomerkey"
						},
						{
							"name": "select2"
						}
					],
					"script": "source(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> dimCustomers\nsource(output(\n\t\tORDER_ID as integer,\n\t\tORDER_DATE as date,\n\t\tCUSTOMER_ID as integer,\n\t\tNET_AMOUNT as string,\n\t\tTAX_MONEY as string,\n\t\tTOTAL_AMOUNT as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> orders\nsource(output(\n\t\tORDER_LINE_ID as integer,\n\t\tORDER_ID as integer,\n\t\tPROD_ID as integer,\n\t\tQUANTITY as integer,\n\t\tORDER_DATE as date,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> orderlines\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimProducts\norders select(mapColumn(\n\t\tORDER_ID,\n\t\tORDER_DATE,\n\t\tCUSTOMER_ID,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectORDERS\norderlines, selectORDERS join(orderlines@ORDER_ID == selectORDERS@ORDER_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> join1\njoin1 select(mapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID = orderlines@ORDER_ID,\n\t\tPROD_ID,\n\t\tCUSTOMER_ID,\n\t\tQUANTITY,\n\t\tORDER_DATE = orderlines@ORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE = orderlines@ROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY = orderlines@ROW_INSERTED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nselect1, selectProductkey join(PROD_ID == PRODUCT_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinProductKey\ndimCustomers filter(CURRENT_RECORD_INDICATOR==1) ~> CRI1Customer\nDimProducts filter(CURRENT_RECORD_INDICATOR==1) ~> CRI1Products\nCRI1Products select(mapColumn(\n\t\tPRODUCT_KEY = S_KEY,\n\t\tPRODUCT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectProductkey\nCRI1Customer select(mapColumn(\n\t\tCUSTOMER_KEY = S_KEY,\n\t\tCUSTOMER_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectCustomerkey\njoinProductKey select(mapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID,\n\t\tCUSTOMER_ID,\n\t\tQUANTITY,\n\t\tORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tPRODUCT_KEY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectProductkeymain\nselectProductkeymain, selectCustomerkey join(selectProductkeymain@CUSTOMER_ID == selectCustomerkey@CUSTOMER_ID,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinCustomerkey\njoinCustomerkey select(mapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID,\n\t\tCUSTOMER_KEY,\n\t\tPRODUCT_KEY,\n\t\tQUANTITY,\n\t\tORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nselect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tORDER_LINE_ID as integer,\n\t\tORDER_ID as integer,\n\t\tCUSTOMER_KEY as integer,\n\t\tPRODUCT_KEY as integer,\n\t\tQUANTITY as integer,\n\t\tORDER_DATE as date,\n\t\tNET_AMOUNT as string,\n\t\tTAX_MONEY as string,\n\t\tTOTAL_AMOUNT as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID,\n\t\tCUSTOMER_KEY,\n\t\tPRODUCT_KEY,\n\t\tQUANTITY,\n\t\tORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact_reorder_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_reorder_sql",
								"type": "DatasetReference"
							},
							"name": "REORDER"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "DIMProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_fact_reorder_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CRI1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						}
					],
					"script": "source(output(\n\t\tPROD_ID as integer,\n\t\tREORDER_ID as integer,\n\t\tDATE_LOW as date,\n\t\tDATE_REORDERED as date,\n\t\tQUAN_LOW as integer,\n\t\tQUAN_REORDERED as integer,\n\t\tDATE_EXPECTED as date,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REORDER\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DIMProducts\nDIMProducts filter(CURRENT_RECORD_INDICATOR==1) ~> CRI1\nCRI1 select(mapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nREORDER, select1 join(PROD_ID == PRODUCT_ID,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> join1\njoin1 select(mapColumn(\n\t\tREORDER_ID,\n\t\tPRODUCT_KEY = S_KEY,\n\t\tPRODUCT_ID = PROD_ID,\n\t\tDATE_LOW,\n\t\tQUAN_LOW,\n\t\tDATE_REORDERED,\n\t\tQUAN_REORDERED,\n\t\tDATE_EXPECTED,\n\t\tROW_INSERTED_DATE = REORDER@ROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY = REORDER@ROW_INSERTED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nselect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tREORDER_ID as integer,\n\t\tPRODUCT_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tDATE_LOW as date,\n\t\tQUAN_LOW as integer,\n\t\tDATE_REORDERED as date,\n\t\tQUAN_REORDERED as integer,\n\t\tDATE_EXPECTED as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_INSERTED_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tREORDER_ID,\n\t\tPRODUCT_KEY,\n\t\tPRODUCT_ID,\n\t\tDATE_LOW,\n\t\tQUAN_LOW,\n\t\tDATE_REORDERED,\n\t\tQUAN_REORDERED,\n\t\tDATE_EXPECTED,\n\t\tROW_INSERTED_BY,\n\t\tROW_INSERTED_DATE\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_reorder_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SQL_o_DIM2",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQL_o_DIM2",
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							}
						},
						{
							"name": "df_fact_orderlines",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> df_fact_orderlines",
							"dataset": {
								"referenceName": "df_fact_orderlines",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared SQL_o_DIM2 = let AdfDoc = Sql.Database(\"dvdserverkrtrimaiq.database.windows.net\", \"srcDB_dvd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"dim_products\"]}[Data] in InputTable;\r\nshared df_fact_orderlines = let AdfDoc = Sql.Database(\"dvdserverkrtrimaiq.database.windows.net\", \"srcDB_dvd\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"dbo\",Item=\"fact_order_lines\"]}[Data] in InputTable;\r\nshared UserQuery = let Source = #\"SQL_o_DIM2\" in Source;\r\nshared Merge = let\r\n  Source = Table.NestedJoin(df_fact_orderlines, {\"PRODUCT_KEY\"}, SQL_o_DIM2, {\"S_KEY\"}, \"SQL_o_DIM2\", JoinKind.FullOuter),\r\n  #\"Expanded SQL_o_DIM2\" = Table.ExpandTableColumn(Source, \"SQL_o_DIM2\", {\"PRICE\"}, {\"PRICE\"}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Expanded SQL_o_DIM2\", {{\"PRICE\", type number}}),\r\n  #\"Added custom\" = Table.AddColumn(#\"Changed column type\", \"TOTAL_SALES\", each [PRICE] * [QUANTITY]),\r\n  #\"Changed column type 1\" = Table.TransformColumnTypes(#\"Added custom\", {{\"TOTAL_SALES\", type number}}),\r\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Changed column type 1\", \"PRICE_BUCKETS\", each if [PRICE] <= 10 then \"0-10\" else if [PRICE] > 10 & [PRICE] <= 15 then \"10-15\" else if [PRICE] > 15 & [PRICE] <= 20 then \"15-20\" else if [PRICE] > 20 & [PRICE] <= 25 then \"20-25\" else if [PRICE] > 25 & [PRICE] <= 30 then \"25-30\" else \"Others\"),\r\n  #\"Changed column type 2\" = Table.AddColumn(#\"Changed column type 1\", \"PRICE_BUCKETS\", each if [PRICE] <= 10 then \"0-10\" else if [PRICE] > 10 and [PRICE] <= 15 then \"10-15\" else if [PRICE] > 15 and [PRICE] <= 20 then \"15-20\" else if [PRICE] > 20 and [PRICE] <= 25 then \"20-25\" else if [PRICE] > 25 and [PRICE] <= 30 then \"25-30\" else \"Others\"),\r\n  #\"Changed column type 3\" = Table.TransformColumnTypes(#\"Changed column type 2\", {{\"PRICE\", Currency.Type}, {\"TOTAL_SALES\", Currency.Type}, {\"PRICE_BUCKETS\", type text}}),\r\n  #\"Changed column type 4\" = Table.TransformColumnTypes(#\"Changed column type 3\", {{\"TOTAL_SALES\", type text}, {\"PRICE\", type text}})\r\nin\r\n  #\"Changed column type 4\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		}
	]
}