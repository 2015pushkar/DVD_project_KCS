{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-dvd"
		},
		"AzureBlobStorage_in_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_in'"
		},
		"PostgreSql_input_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PostgreSql_input'"
		},
		"ls_cus_test_in_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_cus_test_in'"
		},
		"ls_forINPUTDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_forINPUTDB'"
		},
		"sql_DB_SOURCE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_DB_SOURCE'"
		},
		"staging_server_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'staging_server'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "products_in",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_products_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-03T08:36:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/products_in')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pL_JOIN_Products')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JOINProducts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Products": {},
									"categories": {},
									"Inventory": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-01T04:39:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JOINProducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DIMCUSTOMERS_Type2_SCD",
								"type": "DataFlowReference",
								"parameters": {
									"COLUMNS": "'FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER'"
								},
								"datasetParameters": {
									"cusin": {},
									"ExistingTarget": {},
									"Targetforcomparison": {},
									"StartDateUpdatesource": {},
									"InsertNEWRECORD": {},
									"UPDATEOLDRECORD": {},
									"OLDRECORDCRI0": {},
									"EndDatetobeFetchedagain": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-03T15:38:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DIMCUSTOMERS_Type2_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_JOIN_CUSTOMERS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JOINcustomers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customers": {},
									"LoginInformation": {},
									"Country": {},
									"Address": {},
									"CreditCard": {},
									"sinkdatefortype2customer": {},
									"InsertNewCol": {},
									"UpdateSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-01T04:39:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JOINcustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_change_date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DIMCUSTOMERS_Type2_SCD",
								"type": "DataFlowReference",
								"parameters": {
									"COLUMNS": "'FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER'"
								},
								"datasetParameters": {
									"cusin": {},
									"ExistingTarget": {},
									"Targetforcomparison": {},
									"StartDateUpdatesource": {},
									"InsertNEWRECORD": {},
									"UPDATEOLDRECORD": {},
									"OLDRECORDCRI0": {},
									"EndDatetobeFetchedagain": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-02-25T11:23:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DIMCUSTOMERS_Type2_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_fact_orderlines_FnF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_fact_orderlines_FnF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dimCustomers": {},
									"orders": {},
									"orderlines": {},
									"DimProducts": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-04T05:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_fact_orderlines_FnF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_fact_reorder_FnF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_fact_reorder_FnF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"REORDER": {},
									"DIMProducts": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-04T05:59:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_fact_reorder_FnF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dm_customers_final_FnF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_dm_customers_final",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DIMcustomer_FnF",
								"type": "DataFlowReference",
								"parameters": {
									"COLUMNS": "'FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER'"
								},
								"datasetParameters": {
									"ExistingTarget": {},
									"Targetforcomparison": {},
									"StartDateUpdatesource": {},
									"customers": {},
									"LoginInformation": {},
									"Country": {},
									"Address": {},
									"CreditCard": {},
									"InsertNEWRECORD": {},
									"UPDATEOLDRECORD": {},
									"OLDRECORDCRI0": {},
									"EndDatetobeFetchedagain": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-04T05:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DIMcustomer_FnF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dm_products_final_FnF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_dm_products_final",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DIMPRODUCTS_FnF",
								"type": "DataFlowReference",
								"parameters": {
									"COLUMNS": "'CATEGORY_NAME,TITLE,ACTOR'"
								},
								"datasetParameters": {
									"ExistingTarget": {},
									"Targetforcomparison": {},
									"StartDateUpdatesource": {},
									"Products": {},
									"Categories": {},
									"Inventory": {},
									"EndDatetobeFetchedagain": {},
									"InsertNewRecord": {},
									"OLDrecordCRI0": {},
									"UpdateOldRecord": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-04T05:59:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DIMPRODUCTS_FnF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLstart_date_fetch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "START_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "start_date_fetch"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATE_FETCH_PRODUCTS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PRODUCT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "START_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "start_date_fetch_PRODUCT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_o_DIM2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "S_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CATEGORY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "TITLE",
						"type": "varchar"
					},
					{
						"name": "ACTOR",
						"type": "varchar"
					},
					{
						"name": "PRICE",
						"type": "varchar"
					},
					{
						"name": "SPECIAL",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMON_PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUAN_IN_STOCK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SALES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "CURRENT_RECORD_INDICATOR",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dim2Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/address_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "address"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/categories_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "categories"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/country_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "country"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credit_card_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "credit_card"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_hist_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "customer_hist"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_stag')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ostagingstore"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customers_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact_orderlines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ORDER_LINE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUANTITY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORDER_DATE",
						"type": "date"
					},
					{
						"name": "NET_AMOUNT",
						"type": "varchar"
					},
					{
						"name": "TAX_MONEY",
						"type": "varchar"
					},
					{
						"name": "TOTAL_AMOUNT",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "fact_order_lines"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Inventory_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUAN_IN_STOCK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SALES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "inventory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_address')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "address.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "ADDRESS1",
						"type": "String"
					},
					{
						"name": "ADDRESS2",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE",
						"type": "String"
					},
					{
						"name": "COUNTRY_CODE",
						"type": "String"
					},
					{
						"name": "ZIP",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_categories')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "categories.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "CATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_categories_dql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CATEGORY_ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "categories"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_country')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "country.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "COUNTRY_CODE",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_countryAzure')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_forINPUTDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "COUNTRY_CODE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "COUNTRY_NAME",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "country"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_forINPUTDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_credit_card')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "credit_card.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "CREDIT_CARD_TYPE",
						"type": "String"
					},
					{
						"name": "CREDIT_CARD_NUMBER",
						"type": "String"
					},
					{
						"name": "CREDIT_CARD_EXPIRATION",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cus_test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cus_test_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "fol_test"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "INPUT01.csv",
						"container": "inputfortest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "ADDRESS1",
						"type": "String"
					},
					{
						"name": "ADDRESS2",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE",
						"type": "String"
					},
					{
						"name": "ZIP",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "REGION",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE",
						"type": "String"
					},
					{
						"name": "CREDIT_CARD_TYPE",
						"type": "String"
					},
					{
						"name": "CREDIT_CARD_NUMBER",
						"type": "String"
					},
					{
						"name": "CREDIT_CARD_EXPIRATION",
						"type": "String"
					},
					{
						"name": "USER_NAME",
						"type": "String"
					},
					{
						"name": "PASSWORD",
						"type": "String"
					},
					{
						"name": "DATE_OF_BIRTH",
						"type": "String"
					},
					{
						"name": "INCOME",
						"type": "String"
					},
					{
						"name": "GENDER",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cus_test_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customerDBAzure')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_forINPUTDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FIRST_NAME",
						"type": "varchar"
					},
					{
						"name": "LAST_NAME",
						"type": "varchar"
					},
					{
						"name": "REGION",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "EMAIL",
						"type": "varchar"
					},
					{
						"name": "PHONE",
						"type": "varchar"
					},
					{
						"name": "DATE_OF_BIRTH",
						"type": "date"
					},
					{
						"name": "INCOME",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GENDER",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_forINPUTDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_hist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer_hist.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "PROD_ID",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "REGION",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE",
						"type": "String"
					},
					{
						"name": "DATE_OF_BIRTH",
						"type": "String"
					},
					{
						"name": "INCOME",
						"type": "String"
					},
					{
						"name": "GENDER",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fact_reorder_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "REORDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATE_LOW",
						"type": "date"
					},
					{
						"name": "QUAN_LOW",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATE_REORDERED",
						"type": "date"
					},
					{
						"name": "QUAN_REORDERED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATE_EXPECTED",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "fact_reorder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inventory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inventory.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PROD_ID",
						"type": "String"
					},
					{
						"name": "QUAN_IN_STOCK",
						"type": "String"
					},
					{
						"name": "SALES",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_login_information')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "login_information.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "USER_NAME",
						"type": "String"
					},
					{
						"name": "PASSWORD",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_login_informationAzure')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_forINPUTDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "USER_NAME",
						"type": "varchar"
					},
					{
						"name": "PASSWORD",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "login_information"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_forINPUTDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_order_lines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "order_lines.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDER_LINE_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "PROD_ID",
						"type": "String"
					},
					{
						"name": "QUANTITY",
						"type": "String"
					},
					{
						"name": "ORDER_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_orderlines_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ORDER_LINE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUANTITY",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ORDER_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "order_lines"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "orders.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_DATE",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "NET_AMOUNT",
						"type": "String"
					},
					{
						"name": "TAX_MONEY",
						"type": "String"
					},
					{
						"name": "TOTAL_AMOUNT",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_orders_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ORDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORDER_DATE",
						"type": "date"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NET_AMOUNT",
						"type": "varchar"
					},
					{
						"name": "TAX_MONEY",
						"type": "varchar"
					},
					{
						"name": "TOTAL_AMOUNT",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "products.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PROD_ID",
						"type": "String"
					},
					{
						"name": "CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "TITLE",
						"type": "String"
					},
					{
						"name": "ACTOR",
						"type": "String"
					},
					{
						"name": "PRICE",
						"type": "String"
					},
					{
						"name": "SPECIAL",
						"type": "String"
					},
					{
						"name": "COMMON_PROD_ID",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_products_csvfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cus_test_in",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Productscsv.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_ID",
						"type": "String"
					},
					{
						"name": "CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "CATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "TITLE",
						"type": "String"
					},
					{
						"name": "ACTOR",
						"type": "String"
					},
					{
						"name": "PRICE",
						"type": "String"
					},
					{
						"name": "SPECIAL",
						"type": "String"
					},
					{
						"name": "COMMON_PROD_ID",
						"type": "String"
					},
					{
						"name": "QUAN_IN_STOCK",
						"type": "String"
					},
					{
						"name": "SALES",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cus_test_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_products_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CATEGORY_ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "TITLE",
						"type": "varchar"
					},
					{
						"name": "ACTOR",
						"type": "varchar"
					},
					{
						"name": "PRICE",
						"type": "varchar"
					},
					{
						"name": "SPECIAL",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMON_PROD_ID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_reorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_in",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "blob_input_data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "reorder.csv",
						"container": "vulnerability-assessment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PROD_ID",
						"type": "String"
					},
					{
						"name": "REORDER_ID",
						"type": "String"
					},
					{
						"name": "DATE_LOW",
						"type": "String"
					},
					{
						"name": "DATE_REORDERED",
						"type": "String"
					},
					{
						"name": "QUAN_LOW",
						"type": "String"
					},
					{
						"name": "QUAN_REORDERED",
						"type": "String"
					},
					{
						"name": "DATE_EXPECTED",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "String"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "String"
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_in')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_reorder_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputsforOLTP"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "REORDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATE_LOW",
						"type": "date"
					},
					{
						"name": "DATE_REORDERED",
						"type": "date"
					},
					{
						"name": "QUAN_LOW",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUAN_REORDERED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATE_EXPECTED",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "reorder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inventory_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "inventory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/login_information_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "login_information"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_lines_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "order_lines"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/orders_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/products_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/reorder_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSql_input",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "inputs_from_postgresqlDB"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "oltp_ds2",
					"table": "reorder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSql_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "S_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FIRST_NAME",
						"type": "varchar"
					},
					{
						"name": "LAST_NAME",
						"type": "varchar"
					},
					{
						"name": "ADDRESS1",
						"type": "varchar"
					},
					{
						"name": "ADDRESS2",
						"type": "varchar"
					},
					{
						"name": "CITY",
						"type": "varchar"
					},
					{
						"name": "STATE",
						"type": "varchar"
					},
					{
						"name": "ZIP",
						"type": "int",
						"precision": 10
					},
					{
						"name": "COUNTRY",
						"type": "varchar"
					},
					{
						"name": "REGION",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "EMAIL",
						"type": "varchar"
					},
					{
						"name": "PHONE",
						"type": "varchar"
					},
					{
						"name": "CREDIT_CARD_TYPE",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CREDIT_CARD_NUMBER",
						"type": "varchar"
					},
					{
						"name": "CREDIT_CARD_EXPIRATION",
						"type": "varchar"
					},
					{
						"name": "USER_NAME",
						"type": "varchar"
					},
					{
						"name": "PASSWORD",
						"type": "varchar"
					},
					{
						"name": "DATE_OF_BIRTH",
						"type": "date"
					},
					{
						"name": "INCOME",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GENDER",
						"type": "varchar"
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "CURRENT_RECORD_INDICATOR",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dim_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_DB_SOURCE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_input"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "S_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PRODUCT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CATEGORY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CATEGORY_NAME",
						"type": "varchar"
					},
					{
						"name": "TITLE",
						"type": "varchar"
					},
					{
						"name": "ACTOR",
						"type": "varchar"
					},
					{
						"name": "PRICE",
						"type": "varchar"
					},
					{
						"name": "SPECIAL",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMON_PROD_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QUAN_IN_STOCK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SALES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_INSERTED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_UPDATED_DATE",
						"type": "date"
					},
					{
						"name": "ROW_INSERTED_BY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_UPDATED_BY",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_DB_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_in')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_in_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostgreSql_input')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('PostgreSql_input_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_cus_test_in')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_cus_test_in_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_forINPUTDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_forINPUTDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_DB_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sql_DB_SOURCE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/staging_server')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('staging_server_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-PostgreSQL')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JOINProducts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_categories_dql",
								"type": "DatasetReference"
							},
							"name": "categories"
						},
						{
							"dataset": {
								"referenceName": "ds_Inventory_sql",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_dim_products",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						}
					],
					"script": "source(output(\n\t\tPROD_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Products\nsource(output(\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> categories\nsource(output(\n\t\tPROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Inventory\nProducts, select3 join(Products@CATEGORY_ID == select3@CATEGORY_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> join1\nselect5, select4 join(select5@PROD_ID == select4@PROD_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> join2\ncategories select(mapColumn(\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nInventory select(mapColumn(\n\t\tPROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\njoin1 select(mapColumn(\n\t\tPROD_ID,\n\t\tCATEGORY_ID = Products@CATEGORY_ID,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tCATEGORY_ID = select3@CATEGORY_ID,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select5\njoin2 select(mapColumn(\n\t\tPROD_ID = select5@PROD_ID,\n\t\tCATEGORY_ID,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tCATEGORY_NAME,\n\t\tQUAN_IN_STOCK,\n\t\tSALES\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select6\nselect6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID = PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_categories_dql')]",
				"[concat(variables('factoryId'), '/datasets/ds_Inventory_sql')]",
				"[concat(variables('factoryId'), '/datasets/sql_dim_products')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JOINcustomers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_customers",
								"type": "DatasetReference"
							},
							"name": "customers"
						},
						{
							"dataset": {
								"referenceName": "ds_login_information",
								"type": "DatasetReference"
							},
							"name": "LoginInformation"
						},
						{
							"dataset": {
								"referenceName": "ds_country",
								"type": "DatasetReference"
							},
							"name": "Country"
						},
						{
							"dataset": {
								"referenceName": "ds_address",
								"type": "DatasetReference"
							},
							"name": "Address"
						},
						{
							"dataset": {
								"referenceName": "ds_credit_card",
								"type": "DatasetReference"
							},
							"name": "CreditCard"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "sinkdatefortype2customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "InsertNewCol"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"transformations": [
						{
							"name": "SelectLoginInfo"
						},
						{
							"name": "CusLogininfo"
						},
						{
							"name": "selectAddress"
						},
						{
							"name": "selectCountry"
						},
						{
							"name": "AddressCountryjoin"
						},
						{
							"name": "CusLogAddCountry"
						},
						{
							"name": "SelectCusLogAddCount"
						},
						{
							"name": "Joincustomer"
						},
						{
							"name": "CustomerSelectFinal"
						},
						{
							"name": "SelectCredit"
						},
						{
							"name": "csvDerivedaddCRISdEd"
						},
						{
							"name": "Selectsinkcustomer"
						},
						{
							"name": "LKPSourceSinkCus"
						},
						{
							"name": "FilterExistsrows"
						},
						{
							"name": "addEdCriZERO"
						},
						{
							"name": "Selectonlykeepdestrows"
						},
						{
							"name": "AlterRowUpdateif"
						}
					],
					"script": "source(output(\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tDATE_OF_BIRTH as date 'yyyy-MM-dd',\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date 'yyyy-MM-dd',\n\t\tROW_UPDATED_DATE as date 'yyyy-MM-dd',\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> customers\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_UPDATED_DATE as string,\n\t\tROW_INSERTED_BY as string,\n\t\tROW_UPDATED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> LoginInformation\nsource(output(\n\t\tCOUNTRY_CODE as integer,\n\t\tCOUNTRY_NAME as string,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_INSERTED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Country\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tCOUNTRY_CODE as integer,\n\t\tZIP as integer,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_UPDATED_DATE as string,\n\t\tROW_INSERTED_BY as string,\n\t\tROW_UPDATED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Address\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_UPDATED_DATE as string,\n\t\tROW_INSERTED_BY as string,\n\t\tROW_UPDATED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CreditCard\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sinkdatefortype2customer\nLoginInformation select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tUSER_NAME,\n\t\tPASSWORD\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLoginInfo\ncustomers, SelectLoginInfo join(customers@CUSTOMER_ID == SelectLoginInfo@CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> CusLogininfo\nAddress select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tCOUNTRY_CODE,\n\t\tZIP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectAddress\nCountry select(mapColumn(\n\t\tCOUNTRY_CODE,\n\t\tCOUNTRY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectCountry\nselectAddress, selectCountry join(selectAddress@COUNTRY_CODE == selectCountry@COUNTRY_CODE,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> AddressCountryjoin\nCusLogininfo, AddressCountryjoin join(customers@CUSTOMER_ID == selectAddress@CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> CusLogAddCountry\nCusLogAddCountry select(mapColumn(\n\t\tCUSTOMER_ID = customers@CUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tCUSTOMER_ID = SelectLoginInfo@CUSTOMER_ID,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tCUSTOMER_ID = selectAddress@CUSTOMER_ID,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tCOUNTRY_CODE = selectAddress@COUNTRY_CODE,\n\t\tZIP,\n\t\tCOUNTRY_CODE = selectCountry@COUNTRY_CODE,\n\t\tCOUNTRY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCusLogAddCount\nSelectCusLogAddCount, SelectCredit join(SelectCusLogAddCount@CUSTOMER_ID == SelectCredit@CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Joincustomer\nJoincustomer select(mapColumn(\n\t\tCUSTOMER_ID = SelectCusLogAddCount@CUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomerSelectFinal\nCreditCard select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCredit\nCustomerSelectFinal derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> csvDerivedaddCRISdEd\nsinkdatefortype2customer select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_scus' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Selectsinkcustomer\ncsvDerivedaddCRISdEd, Selectsinkcustomer lookup(CUSTOMER_ID == CUSTOMER_ID_scus,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LKPSourceSinkCus\nLKPSourceSinkCus filter(!isNull(CUSTOMER_ID_scus)) ~> FilterExistsrows\nFilterExistsrows derive(CURRENT_RECORD_INDICATOR_scus = 0,\n\t\tEND_DATE_scus = currentDate()) ~> addEdCriZERO\naddEdCriZERO select(mapColumn(\n\t\tS_KEY_scus,\n\t\tCUSTOMER_ID_scus,\n\t\tFIRST_NAME_scus,\n\t\tLAST_NAME_scus,\n\t\tADDRESS1_scus,\n\t\tADDRESS2_scus,\n\t\tCITY_scus,\n\t\tSTATE_scus,\n\t\tZIP_scus,\n\t\tCOUNTRY_scus,\n\t\tREGION_scus,\n\t\tEMAIL_scus,\n\t\tPHONE_scus,\n\t\tCREDIT_CARD_TYPE_scus,\n\t\tCREDIT_CARD_NUMBER_scus,\n\t\tCREDIT_CARD_EXPIRATION_scus,\n\t\tUSER_NAME_scus,\n\t\tPASSWORD_scus,\n\t\tDATE_OF_BIRTH_scus,\n\t\tINCOME_scus,\n\t\tGENDER_scus,\n\t\tROW_INSERTED_DATE_scus,\n\t\tROW_UPDATED_DATE_scus,\n\t\tROW_INSERTED_BY_scus,\n\t\tROW_UPDATED_BY_scus,\n\t\tSTART_DATE_scus,\n\t\tEND_DATE_scus,\n\t\tCURRENT_RECORD_INDICATOR_scus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Selectonlykeepdestrows\nSelectonlykeepdestrows alterRow(updateIf(true())) ~> AlterRowUpdateif\ncsvDerivedaddCRISdEd sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNewCol\nAlterRowUpdateif sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY = S_KEY_scus,\n\t\tCUSTOMER_ID = CUSTOMER_ID_scus,\n\t\tFIRST_NAME = FIRST_NAME_scus,\n\t\tLAST_NAME = LAST_NAME_scus,\n\t\tADDRESS1 = ADDRESS1_scus,\n\t\tADDRESS2 = ADDRESS2_scus,\n\t\tCITY = CITY_scus,\n\t\tSTATE = STATE_scus,\n\t\tZIP = ZIP_scus,\n\t\tCOUNTRY = COUNTRY_scus,\n\t\tREGION = REGION_scus,\n\t\tEMAIL = EMAIL_scus,\n\t\tPHONE = PHONE_scus,\n\t\tCREDIT_CARD_TYPE = CREDIT_CARD_TYPE_scus,\n\t\tCREDIT_CARD_NUMBER = CREDIT_CARD_NUMBER_scus,\n\t\tCREDIT_CARD_EXPIRATION = CREDIT_CARD_EXPIRATION_scus,\n\t\tUSER_NAME = USER_NAME_scus,\n\t\tPASSWORD = PASSWORD_scus,\n\t\tDATE_OF_BIRTH = DATE_OF_BIRTH_scus,\n\t\tINCOME = INCOME_scus,\n\t\tGENDER = GENDER_scus,\n\t\tROW_INSERTED_DATE = ROW_INSERTED_DATE_scus,\n\t\tROW_UPDATED_DATE = ROW_UPDATED_DATE_scus,\n\t\tROW_INSERTED_BY = ROW_INSERTED_BY_scus,\n\t\tROW_UPDATED_BY = ROW_UPDATED_BY_scus,\n\t\tSTART_DATE = START_DATE_scus,\n\t\tEND_DATE = END_DATE_scus,\n\t\tCURRENT_RECORD_INDICATOR = CURRENT_RECORD_INDICATOR_scus\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_customers')]",
				"[concat(variables('factoryId'), '/datasets/ds_login_information')]",
				"[concat(variables('factoryId'), '/datasets/ds_country')]",
				"[concat(variables('factoryId'), '/datasets/ds_address')]",
				"[concat(variables('factoryId'), '/datasets/ds_credit_card')]",
				"[concat(variables('factoryId'), '/datasets/sql_customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMCUSTOMERS_Type2_SCD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cus_test",
								"type": "DatasetReference"
							},
							"name": "cusin"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "InsertNEWRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "UPDATEOLDRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "OLDRECORDCRI0"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "SelectNewRecord"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "URECORDS"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER')\n}\nsource(output(\n\t\tCUSTOMER_ID as short,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY_NAME as string,\n\t\tREGION as short,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as short,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date 'dd-MM-yyyy',\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date 'dd-MM-yyyy',\n\t\tROW_UPDATED_DATE as date 'dd-MM-yyyy',\n\t\tROW_INSERTED_BY as short,\n\t\tROW_UPDATED_BY as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> cusin\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\ncusin derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tDOB_src = md5(DATE_OF_BIRTH),\n\t\tRID_hash_src = md5(ROW_INSERTED_DATE),\n\t\tRUD_hash_src = md5(ROW_UPDATED_DATE)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tDOB_Tar = md5(DATE_OF_BIRTH),\n\t\tRID_Tar = md5(ROW_INSERTED_DATE),\n\t\tRUD_Tar = md5(ROW_UPDATED_DATE)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(CUSTOMER_ID == Tar_CUSTOMER_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_CUSTOMER_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\naddSDisRUD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecord\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC == columnhashTarget\n\t&& URECORDS@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\nUPDATEDRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = addDays(fetch_START_DATE,1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = addDays(fetch_START_DATE,1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nfilter3, hashkeyTarget join(OLDRECORD@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID\n\t&& columnhashSRC == columnhashTarget,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@CUSTOMER_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tFIRST_NAME = ExistingTarget@FIRST_NAME,\n\t\tLAST_NAME = ExistingTarget@LAST_NAME,\n\t\tADDRESS1 = ExistingTarget@ADDRESS1,\n\t\tADDRESS2 = ExistingTarget@ADDRESS2,\n\t\tCITY = ExistingTarget@CITY,\n\t\tSTATE = ExistingTarget@STATE,\n\t\tZIP = ExistingTarget@ZIP,\n\t\tCOUNTRY,\n\t\tREGION = ExistingTarget@REGION,\n\t\tEMAIL = ExistingTarget@EMAIL,\n\t\tPHONE = ExistingTarget@PHONE,\n\t\tCREDIT_CARD_TYPE = ExistingTarget@CREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER = ExistingTarget@CREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION = ExistingTarget@CREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME = ExistingTarget@USER_NAME,\n\t\tPASSWORD = ExistingTarget@PASSWORD,\n\t\tDATE_OF_BIRTH = ExistingTarget@DATE_OF_BIRTH,\n\t\tINCOME = ExistingTarget@INCOME,\n\t\tGENDER = ExistingTarget@GENDER,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilter1 derive(END_DATE = currentDate(),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nselect2 alterRow(updateIf(1==1)) ~> alterRow2\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORDS\nURECORDS filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselect1, fetchstartdate join(CUSTOMER_ID == fetch_CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_CUSTOMER_ID = CUSTOMER_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\nSelectNewRecord sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNEWRECORD\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UPDATEOLDRECORD\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDRECORDCRI0\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cus_test')]",
				"[concat(variables('factoryId'), '/datasets/sql_customers')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLstart_date_fetch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMPRODUCTS_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_categories_dql",
								"type": "DatasetReference"
							},
							"name": "Categories"
						},
						{
							"dataset": {
								"referenceName": "ds_Inventory_sql",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "InsertNewRecord"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "OLDrecordCRI0"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "UpdateOldRecord"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "URECORD"
						},
						{
							"name": "selectUPDATED"
						},
						{
							"name": "select7"
						},
						{
							"name": "selectcategory"
						},
						{
							"name": "joinProductCategory"
						},
						{
							"name": "selectInventory"
						},
						{
							"name": "select8"
						},
						{
							"name": "joinProductInventory"
						},
						{
							"name": "csvProducts"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('CATEGORY_NAME,TITLE,ACTOR')\n}\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\nsource(output(\n\t\tPROD_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Products\nsource(output(\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Categories\nsource(output(\n\t\tPROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Inventory\nselect7 derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tpriceSRC = md5(PRICE),\n\t\tIntValSRC = md5(SPECIAL,COMMON_PROD_ID,QUAN_IN_STOCK,SALES)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tpriceTAR = md5(PRICE),\n\t\tIntvalTAR = md5(SPECIAL,COMMON_PROD_ID,QUAN_IN_STOCK,SALES)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(PRODUCT_ID == Tar_PRODUCT_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_PRODUCT_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC==columnhashTarget && URECORD@PRODUCT_ID==ExistingTarget@PRODUCT_ID && IntValSRC==IntvalTAR && priceSRC==priceTAR,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = addDays(fetch_START_DATE,1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = addDays(fetch_START_DATE,1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nfilter3, hashkeyTarget join(OLDRECORD@PRODUCT_ID == ExistingTarget@PRODUCT_ID\n\t&& columnhashSRC == columnhashTarget\n\t&& IntValSRC == IntvalTAR\n\t&& priceSRC == priceTAR,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@PRODUCT_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nfilter1 derive(END_DATE = addDays(currentDate(),-1),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nderivedColumn2 alterRow(updateIf(1==1)) ~> alterRow2\nURECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselectUPDATED, fetchstartdate join(PRODUCT_ID == fetch_PRODUCT_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_PRODUCT_ID = PRODUCT_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\naddSDisRUD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select5\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntValSRC,\n\t\tpriceSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntValSRC,\n\t\tpriceSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORD\nUPDATEDRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectUPDATED\ncsvProducts select(mapColumn(\n\t\tPRODUCT_ID = PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select7\nCategories select(mapColumn(\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectcategory\nProducts, selectcategory join(Products@CATEGORY_ID == selectcategory@CATEGORY_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinProductCategory\nInventory select(mapColumn(\n\t\tPROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectInventory\njoinProductCategory select(mapColumn(\n\t\tPROD_ID,\n\t\tCATEGORY_ID = Products@CATEGORY_ID,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select8\nselect8, selectInventory join(select8@PROD_ID == selectInventory@PROD_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinProductInventory\njoinProductInventory select(mapColumn(\n\t\tPROD_ID = select8@PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> csvProducts\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain\nselect5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNewRecord\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tCATEGORY_ID = ExistingTarget@CATEGORY_ID,\n\t\tCATEGORY_NAME = ExistingTarget@CATEGORY_NAME,\n\t\tTITLE = ExistingTarget@TITLE,\n\t\tACTOR = ExistingTarget@ACTOR,\n\t\tPRICE = ExistingTarget@PRICE,\n\t\tSPECIAL = ExistingTarget@SPECIAL,\n\t\tCOMMON_PROD_ID = ExistingTarget@COMMON_PROD_ID,\n\t\tQUAN_IN_STOCK = ExistingTarget@QUAN_IN_STOCK,\n\t\tSALES = ExistingTarget@SALES,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDrecordCRI0\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UpdateOldRecord"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_o_DIM2')]",
				"[concat(variables('factoryId'), '/datasets/DATE_FETCH_PRODUCTS')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_categories_dql')]",
				"[concat(variables('factoryId'), '/datasets/ds_Inventory_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMPRODUCTS_Type2_SCD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cus_test",
								"type": "DatasetReference"
							},
							"name": "cusin"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "InsertNEWRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "UPDATEOLDRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "OLDRECORDCRI0"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "SelectNewRecord"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "URECORDS"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "Addkey"
						},
						{
							"name": "select4"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER')\n}\nsource(output(\n\t\tCUSTOMER_ID as short,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY_NAME as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as short,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date 'dd-MM-yyyy',\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date 'dd-MM-yyyy',\n\t\tROW_UPDATED_DATE as date 'dd-MM-yyyy',\n\t\tROW_INSERTED_BY as short,\n\t\tROW_UPDATED_BY as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> cusin\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\ncusin derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tDOB_src = md5(DATE_OF_BIRTH),\n\t\tRID_hash_src = md5(ROW_INSERTED_DATE),\n\t\tRUD_hash_src = md5(ROW_UPDATED_DATE)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tDOB_Tar = md5(DATE_OF_BIRTH),\n\t\tRID_Tar = md5(ROW_INSERTED_DATE),\n\t\tRUD_Tar = md5(ROW_UPDATED_DATE)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nAddkey, MAXSURROGATEKEY join(KEY == MAXSURROGATEKEY||true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nderivedColumn3, TarappendedtoSINK lookup(CUSTOMER_ID == Tar_CUSTOMER_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_CUSTOMER_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\naddSDisRUD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecord\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC == columnhashTarget\n\t&& URECORDS@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\nUPDATEDRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = addDays(fetch_START_DATE,1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = addDays(fetch_START_DATE,1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nfilter3, hashkeyTarget join(OLDRECORD@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID\n\t&& columnhashSRC == columnhashTarget,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@CUSTOMER_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tFIRST_NAME = ExistingTarget@FIRST_NAME,\n\t\tLAST_NAME = ExistingTarget@LAST_NAME,\n\t\tADDRESS1 = ExistingTarget@ADDRESS1,\n\t\tADDRESS2 = ExistingTarget@ADDRESS2,\n\t\tCITY = ExistingTarget@CITY,\n\t\tSTATE = ExistingTarget@STATE,\n\t\tZIP = ExistingTarget@ZIP,\n\t\tCOUNTRY,\n\t\tREGION = ExistingTarget@REGION,\n\t\tEMAIL = ExistingTarget@EMAIL,\n\t\tPHONE = ExistingTarget@PHONE,\n\t\tCREDIT_CARD_TYPE = ExistingTarget@CREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER = ExistingTarget@CREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION = ExistingTarget@CREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME = ExistingTarget@USER_NAME,\n\t\tPASSWORD = ExistingTarget@PASSWORD,\n\t\tDATE_OF_BIRTH = ExistingTarget@DATE_OF_BIRTH,\n\t\tINCOME = ExistingTarget@INCOME,\n\t\tGENDER = ExistingTarget@GENDER,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilter1 derive(END_DATE = currentDate(),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nselect2 alterRow(updateIf(1==1)) ~> alterRow2\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORDS\nURECORDS filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselect1, fetchstartdate join(CUSTOMER_ID == fetch_CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_CUSTOMER_ID = CUSTOMER_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nJoin1 derive(SURR_KEY = KEY+MAXSURROGATEKEY) ~> derivedColumn3\nhashkeySRC keyGenerate(output(KEY as long),\n\tstartAt: 1L) ~> Addkey\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\nSelectNewRecord sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNEWRECORD\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UPDATEOLDRECORD\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDRECORDCRI0\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cus_test')]",
				"[concat(variables('factoryId'), '/datasets/sql_customers')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLstart_date_fetch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMPRODUCTS_final')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_categories_dql",
								"type": "DatasetReference"
							},
							"name": "Categories"
						},
						{
							"dataset": {
								"referenceName": "ds_Inventory_sql",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "InsertNewRecord"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "OLDrecordCRI0"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "UpdateOldRecord"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "URECORD"
						},
						{
							"name": "selectUPDATED"
						},
						{
							"name": "select7"
						},
						{
							"name": "selectcategory"
						},
						{
							"name": "joinProductCategory"
						},
						{
							"name": "selectInventory"
						},
						{
							"name": "select8"
						},
						{
							"name": "joinProductInventory"
						},
						{
							"name": "csvProducts"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('CATEGORY_NAME,TITLE,ACTOR')\n}\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\nsource(output(\n\t\tPROD_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Products\nsource(output(\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Categories\nsource(output(\n\t\tPROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Inventory\nselect7 derive(columnhashSRC = md5(byNames(split($COLUMNS,',')))) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,',')))) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(PRODUCT_ID == Tar_PRODUCT_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_PRODUCT_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC==columnhashTarget && URECORD@PRODUCT_ID==ExistingTarget@PRODUCT_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = addDays(fetch_START_DATE,1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = addDays(fetch_START_DATE,1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nfilter3, hashkeyTarget join(OLDRECORD@PRODUCT_ID == ExistingTarget@PRODUCT_ID\n\t&& columnhashSRC == columnhashTarget,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@PRODUCT_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nfilter1 derive(END_DATE = addDays(currentDate(),-1),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nderivedColumn2 alterRow(updateIf(1==1)) ~> alterRow2\nURECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselectUPDATED, fetchstartdate join(PRODUCT_ID == fetch_PRODUCT_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_PRODUCT_ID = PRODUCT_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\naddSDisRUD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select5\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORD\nUPDATEDRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectUPDATED\ncsvProducts select(mapColumn(\n\t\tPRODUCT_ID = PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select7\nCategories select(mapColumn(\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectcategory\nProducts, selectcategory join(Products@CATEGORY_ID == selectcategory@CATEGORY_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinProductCategory\nInventory select(mapColumn(\n\t\tPROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectInventory\njoinProductCategory select(mapColumn(\n\t\tPROD_ID,\n\t\tCATEGORY_ID = Products@CATEGORY_ID,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select8\nselect8, selectInventory join(select8@PROD_ID == selectInventory@PROD_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinProductInventory\njoinProductInventory select(mapColumn(\n\t\tPROD_ID = select8@PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> csvProducts\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain\nselect5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNewRecord\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tCATEGORY_ID = ExistingTarget@CATEGORY_ID,\n\t\tCATEGORY_NAME = ExistingTarget@CATEGORY_NAME,\n\t\tTITLE = ExistingTarget@TITLE,\n\t\tACTOR = ExistingTarget@ACTOR,\n\t\tPRICE = ExistingTarget@PRICE,\n\t\tSPECIAL = ExistingTarget@SPECIAL,\n\t\tCOMMON_PROD_ID = ExistingTarget@COMMON_PROD_ID,\n\t\tQUAN_IN_STOCK = ExistingTarget@QUAN_IN_STOCK,\n\t\tSALES = ExistingTarget@SALES,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDrecordCRI0\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UpdateOldRecord"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_o_DIM2')]",
				"[concat(variables('factoryId'), '/datasets/DATE_FETCH_PRODUCTS')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_categories_dql')]",
				"[concat(variables('factoryId'), '/datasets/ds_Inventory_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMPRODUCTS_final_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_categories_dql",
								"type": "DatasetReference"
							},
							"name": "Categories"
						},
						{
							"dataset": {
								"referenceName": "ds_Inventory_sql",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DATE_FETCH_PRODUCTS",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "InsertNewRecord"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "OLDrecordCRI0"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "UpdateOldRecord"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "URECORD"
						},
						{
							"name": "selectUPDATED"
						},
						{
							"name": "select7"
						},
						{
							"name": "selectcategory"
						},
						{
							"name": "joinProductCategory"
						},
						{
							"name": "selectInventory"
						},
						{
							"name": "select8"
						},
						{
							"name": "joinProductInventory"
						},
						{
							"name": "csvProducts"
						},
						{
							"name": "ProductTable"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('CATEGORY_NAME,TITLE,ACTOR')\n}\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\nsource(output(\n\t\tPROD_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Products\nsource(output(\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Categories\nsource(output(\n\t\tPROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Inventory\nselect7 derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tIntValSRC = md5(PRICE,SPECIAL,COMMON_PROD_ID,QUAN_IN_STOCK,SALES)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tIntValTar = md5(PRICE,SPECIAL,COMMON_PROD_ID,QUAN_IN_STOCK,SALES)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(PRODUCT_ID == Tar_PRODUCT_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_PRODUCT_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC==columnhashTarget && IntValSRC==IntValTar && URECORD@PRODUCT_ID==ExistingTarget@PRODUCT_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = addDays(fetch_START_DATE,1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = addDays(fetch_START_DATE,1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nfilter3, hashkeyTarget join(OLDRECORD@PRODUCT_ID == ExistingTarget@PRODUCT_ID\n\t&& columnhashSRC == columnhashTarget\n\t&& IntValSRC == IntValTar,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@PRODUCT_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nfilter1 derive(END_DATE = addDays(currentDate(),-1),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nderivedColumn2 alterRow(updateIf(1==1)) ~> alterRow2\nURECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselectUPDATED, fetchstartdate join(PRODUCT_ID == fetch_PRODUCT_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_PRODUCT_ID = PRODUCT_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\naddSDisRUD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select5\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntValSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntValSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORD\nUPDATEDRECORD select(mapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_PRODUCT_ID,\n\t\tTar_CATEGORY_ID,\n\t\tTar_CATEGORY_NAME,\n\t\tTar_TITLE,\n\t\tTar_ACTOR,\n\t\tTar_PRICE,\n\t\tTar_SPECIAL,\n\t\tTar_COMMON_PROD_ID,\n\t\tTar_QUAN_IN_STOCK,\n\t\tTar_SALES,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectUPDATED\ncsvProducts select(mapColumn(\n\t\tPRODUCT_ID = PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select7\nCategories select(mapColumn(\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectcategory\nProductTable, selectcategory join(ProductTable@CATEGORY_ID == selectcategory@CATEGORY_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinProductCategory\nInventory select(mapColumn(\n\t\tPROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectInventory\njoinProductCategory select(mapColumn(\n\t\tPROD_ID,\n\t\tCATEGORY_ID = ProductTable@CATEGORY_ID,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tCATEGORY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select8\nselect8, selectInventory join(select8@PROD_ID == selectInventory@PROD_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinProductInventory\njoinProductInventory select(mapColumn(\n\t\tPROD_ID = select8@PROD_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> csvProducts\nProducts select(mapColumn(\n\t\tPROD_ID,\n\t\tCATEGORY_ID,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProductTable\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPRODUCT_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain\nselect5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNewRecord\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tPRODUCT_ID = ExistingTarget@PRODUCT_ID,\n\t\tCATEGORY_ID = ExistingTarget@CATEGORY_ID,\n\t\tCATEGORY_NAME = ExistingTarget@CATEGORY_NAME,\n\t\tTITLE = ExistingTarget@TITLE,\n\t\tACTOR = ExistingTarget@ACTOR,\n\t\tPRICE = ExistingTarget@PRICE,\n\t\tSPECIAL = ExistingTarget@SPECIAL,\n\t\tCOMMON_PROD_ID = ExistingTarget@COMMON_PROD_ID,\n\t\tQUAN_IN_STOCK = ExistingTarget@QUAN_IN_STOCK,\n\t\tSALES = ExistingTarget@SALES,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDrecordCRI0\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tPRODUCT_ID,\n\t\tCATEGORY_ID,\n\t\tCATEGORY_NAME,\n\t\tTITLE,\n\t\tACTOR,\n\t\tPRICE,\n\t\tSPECIAL,\n\t\tCOMMON_PROD_ID,\n\t\tQUAN_IN_STOCK,\n\t\tSALES,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UpdateOldRecord"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_o_DIM2')]",
				"[concat(variables('factoryId'), '/datasets/DATE_FETCH_PRODUCTS')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_categories_dql')]",
				"[concat(variables('factoryId'), '/datasets/ds_Inventory_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DIMcustomer_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "ExistingTarget"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "Targetforcomparison"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "StartDateUpdatesource"
						},
						{
							"dataset": {
								"referenceName": "ds_customerDBAzure",
								"type": "DatasetReference"
							},
							"name": "customers"
						},
						{
							"dataset": {
								"referenceName": "ds_login_information",
								"type": "DatasetReference"
							},
							"name": "LoginInformation"
						},
						{
							"dataset": {
								"referenceName": "ds_country",
								"type": "DatasetReference"
							},
							"name": "Country"
						},
						{
							"dataset": {
								"referenceName": "ds_address",
								"type": "DatasetReference"
							},
							"name": "Address"
						},
						{
							"dataset": {
								"referenceName": "ds_credit_card",
								"type": "DatasetReference"
							},
							"name": "CreditCard"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "InsertNEWRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "UPDATEOLDRECORD"
						},
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "OLDRECORDCRI0"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLstart_date_fetch",
								"type": "DatasetReference"
							},
							"name": "EndDatetobeFetchedagain"
						}
					],
					"transformations": [
						{
							"name": "hashkeySRC"
						},
						{
							"name": "CRI1"
						},
						{
							"name": "hashkeyTarget"
						},
						{
							"name": "MAXSURROGATEKEY"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TarappendedtoSINK"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "addSDisRUD"
						},
						{
							"name": "SelectNewRecord"
						},
						{
							"name": "CIR1"
						},
						{
							"name": "UPDATEDRECORD"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "OLDRECORD"
						},
						{
							"name": "joinOLDRECORD"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "URECORDS"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinforstartdate"
						},
						{
							"name": "fetchstartdate"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "selectlogininformation"
						},
						{
							"name": "joinCUSlogininformation"
						},
						{
							"name": "selectAddress"
						},
						{
							"name": "joinAddressCountry"
						},
						{
							"name": "selectcountry"
						},
						{
							"name": "joinCusAddressCountry"
						},
						{
							"name": "selectCustomerLogAddCountry"
						},
						{
							"name": "selectCreditCard"
						},
						{
							"name": "joinCusCreditcard"
						},
						{
							"name": "CSVCustomer"
						}
					],
					"script": "parameters{\n\tCOLUMNS as string ('FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER,PHONE,CREDIT_CARD_NUMBER')\n}\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> customers\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_UPDATED_DATE as string,\n\t\tROW_INSERTED_BY as string,\n\t\tROW_UPDATED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> LoginInformation\nsource(output(\n\t\tCOUNTRY_CODE as integer,\n\t\tCOUNTRY_NAME as string,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_INSERTED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Country\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tCOUNTRY_CODE as integer,\n\t\tZIP as integer,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_UPDATED_DATE as string,\n\t\tROW_INSERTED_BY as string,\n\t\tROW_UPDATED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Address\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tROW_INSERTED_DATE as string,\n\t\tROW_UPDATED_DATE as string,\n\t\tROW_INSERTED_BY as string,\n\t\tROW_UPDATED_BY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CreditCard\nCSVCustomer derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tcountrySRC = md5(COUNTRY_NAME),\n\t\tDOB_src = md5(DATE_OF_BIRTH),\n\t\tIntegerValuesSRC = md5(ZIP,REGION,CREDIT_CARD_TYPE,INCOME),\n\t\tRID_hash_src = md5(ROW_INSERTED_DATE),\n\t\tRUD_hash_src = md5(ROW_UPDATED_DATE)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tcountryTarget = md5(COUNTRY),\n\t\tIntegerValuesTarget = md5(ZIP,REGION,CREDIT_CARD_TYPE,INCOME),\n\t\tDOB_Tar = md5(DATE_OF_BIRTH),\n\t\tRID_Tar = md5(ROW_INSERTED_DATE),\n\t\tRUD_Tar = md5(ROW_UPDATED_DATE)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(CUSTOMER_ID == Tar_CUSTOMER_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_CUSTOMER_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\naddSDisRUD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecord\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC == columnhashTarget && IntegerValuesSRC == IntegerValuesTarget &&countrySRC==countryTarget && DOB_src==DOB_Tar\n\t&& URECORDS@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\nUPDATEDRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = addDays(fetch_START_DATE,1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = addDays(fetch_START_DATE,1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntegerValuesSRC,\n\t\tcountrySRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nfilter3, hashkeyTarget join(OLDRECORD@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID\n\t&& columnhashSRC == columnhashTarget\n\t&& IntegerValuesSRC == IntegerValuesTarget\n\t&& countrySRC == countryTarget\n\t&& DOB_src == DOB_Tar,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@CUSTOMER_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tFIRST_NAME = ExistingTarget@FIRST_NAME,\n\t\tLAST_NAME = ExistingTarget@LAST_NAME,\n\t\tADDRESS1 = ExistingTarget@ADDRESS1,\n\t\tADDRESS2 = ExistingTarget@ADDRESS2,\n\t\tCITY = ExistingTarget@CITY,\n\t\tSTATE = ExistingTarget@STATE,\n\t\tZIP = ExistingTarget@ZIP,\n\t\tCOUNTRY,\n\t\tREGION = ExistingTarget@REGION,\n\t\tEMAIL = ExistingTarget@EMAIL,\n\t\tPHONE = ExistingTarget@PHONE,\n\t\tCREDIT_CARD_TYPE = ExistingTarget@CREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER = ExistingTarget@CREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION = ExistingTarget@CREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME = ExistingTarget@USER_NAME,\n\t\tPASSWORD = ExistingTarget@PASSWORD,\n\t\tDATE_OF_BIRTH = ExistingTarget@DATE_OF_BIRTH,\n\t\tINCOME = ExistingTarget@INCOME,\n\t\tGENDER = ExistingTarget@GENDER,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilter1 derive(END_DATE = addDays(currentDate(), -1),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nselect2 alterRow(updateIf(1==1)) ~> alterRow2\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tIntegerValuesSRC,\n\t\tcountrySRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORDS\nURECORDS filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselect1, fetchstartdate join(CUSTOMER_ID == fetch_CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_CUSTOMER_ID = CUSTOMER_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\nLoginInformation select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tUSER_NAME,\n\t\tPASSWORD\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectlogininformation\ncustomers, selectlogininformation join(customers@CUSTOMER_ID == selectlogininformation@CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinCUSlogininformation\nAddress select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tCOUNTRY_CODE,\n\t\tZIP\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectAddress\nselectAddress, selectcountry join(selectAddress@COUNTRY_CODE == selectcountry@COUNTRY_CODE,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinAddressCountry\nCountry select(mapColumn(\n\t\tCOUNTRY_CODE,\n\t\tCOUNTRY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectcountry\njoinCUSlogininformation, joinAddressCountry join(customers@CUSTOMER_ID == selectAddress@CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinCusAddressCountry\njoinCusAddressCountry select(mapColumn(\n\t\tCUSTOMER_ID = customers@CUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectCustomerLogAddCountry\nCreditCard select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectCreditCard\nselectCustomerLogAddCountry, selectCreditCard join(selectCustomerLogAddCountry@CUSTOMER_ID == selectCreditCard@CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinCusCreditcard\njoinCusCreditcard select(mapColumn(\n\t\tCUSTOMER_ID = selectCustomerLogAddCountry@CUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CSVCustomer\nSelectNewRecord sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNEWRECORD\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UPDATEOLDRECORD\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDRECORDCRI0\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_customers')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLstart_date_fetch')]",
				"[concat(variables('factoryId'), '/datasets/ds_customerDBAzure')]",
				"[concat(variables('factoryId'), '/datasets/ds_login_information')]",
				"[concat(variables('factoryId'), '/datasets/ds_country')]",
				"[concat(variables('factoryId'), '/datasets/ds_address')]",
				"[concat(variables('factoryId'), '/datasets/ds_credit_card')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact_orderlines_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sql_customers",
								"type": "DatasetReference"
							},
							"name": "dimCustomers"
						},
						{
							"dataset": {
								"referenceName": "ds_orders_sql",
								"type": "DatasetReference"
							},
							"name": "orders"
						},
						{
							"dataset": {
								"referenceName": "ds_orderlines_sql",
								"type": "DatasetReference"
							},
							"name": "orderlines"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "DimProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "df_fact_orderlines",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectORDERS"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "joinProductKey"
						},
						{
							"name": "CRI1Customer"
						},
						{
							"name": "CRI1Products"
						},
						{
							"name": "selectProductkey"
						},
						{
							"name": "selectCustomerkey"
						},
						{
							"name": "selectProductkeymain"
						},
						{
							"name": "joinCustomerkey"
						},
						{
							"name": "select2"
						}
					],
					"script": "source(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> dimCustomers\nsource(output(\n\t\tORDER_ID as integer,\n\t\tORDER_DATE as date,\n\t\tCUSTOMER_ID as integer,\n\t\tNET_AMOUNT as string,\n\t\tTAX_MONEY as string,\n\t\tTOTAL_AMOUNT as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> orders\nsource(output(\n\t\tORDER_LINE_ID as integer,\n\t\tORDER_ID as integer,\n\t\tPROD_ID as integer,\n\t\tQUANTITY as integer,\n\t\tORDER_DATE as date,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> orderlines\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimProducts\norders select(mapColumn(\n\t\tORDER_ID,\n\t\tORDER_DATE,\n\t\tCUSTOMER_ID,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectORDERS\norderlines, selectORDERS join(orderlines@ORDER_ID == selectORDERS@ORDER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> join1\njoin1 select(mapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID = orderlines@ORDER_ID,\n\t\tPROD_ID,\n\t\tCUSTOMER_ID,\n\t\tQUANTITY,\n\t\tORDER_DATE = orderlines@ORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE = orderlines@ROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY = orderlines@ROW_INSERTED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nselect1, selectProductkey join(PROD_ID == PRODUCT_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinProductKey\ndimCustomers filter(CURRENT_RECORD_INDICATOR==1) ~> CRI1Customer\nDimProducts filter(CURRENT_RECORD_INDICATOR==1) ~> CRI1Products\nCRI1Products select(mapColumn(\n\t\tPRODUCT_KEY = S_KEY,\n\t\tPRODUCT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectProductkey\nCRI1Customer select(mapColumn(\n\t\tCUSTOMER_KEY = S_KEY,\n\t\tCUSTOMER_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectCustomerkey\njoinProductKey select(mapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID,\n\t\tCUSTOMER_ID,\n\t\tQUANTITY,\n\t\tORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tPRODUCT_KEY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectProductkeymain\nselectProductkeymain, selectCustomerkey join(selectProductkeymain@CUSTOMER_ID == selectCustomerkey@CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinCustomerkey\njoinCustomerkey select(mapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID,\n\t\tCUSTOMER_KEY,\n\t\tPRODUCT_KEY,\n\t\tQUANTITY,\n\t\tORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nselect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tORDER_LINE_ID as integer,\n\t\tORDER_ID as integer,\n\t\tCUSTOMER_KEY as integer,\n\t\tPRODUCT_KEY as integer,\n\t\tQUANTITY as integer,\n\t\tORDER_DATE as date,\n\t\tNET_AMOUNT as string,\n\t\tTAX_MONEY as string,\n\t\tTOTAL_AMOUNT as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_INSERTED_BY as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tORDER_LINE_ID,\n\t\tORDER_ID,\n\t\tCUSTOMER_KEY,\n\t\tPRODUCT_KEY,\n\t\tQUANTITY,\n\t\tORDER_DATE,\n\t\tNET_AMOUNT,\n\t\tTAX_MONEY,\n\t\tTOTAL_AMOUNT,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_customers')]",
				"[concat(variables('factoryId'), '/datasets/ds_orders_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_orderlines_sql')]",
				"[concat(variables('factoryId'), '/datasets/SQL_o_DIM2')]",
				"[concat(variables('factoryId'), '/datasets/df_fact_orderlines')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact_reorder_FnF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_reorder_sql",
								"type": "DatasetReference"
							},
							"name": "REORDER"
						},
						{
							"dataset": {
								"referenceName": "SQL_o_DIM2",
								"type": "DatasetReference"
							},
							"name": "DIMProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_fact_reorder_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CRI1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						}
					],
					"script": "source(output(\n\t\tPROD_ID as integer,\n\t\tREORDER_ID as integer,\n\t\tDATE_LOW as date,\n\t\tDATE_REORDERED as date,\n\t\tQUAN_LOW as integer,\n\t\tQUAN_REORDERED as integer,\n\t\tDATE_EXPECTED as date,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REORDER\nsource(output(\n\t\tS_KEY as integer,\n\t\tPRODUCT_ID as integer,\n\t\tCATEGORY_ID as integer,\n\t\tCATEGORY_NAME as string,\n\t\tTITLE as string,\n\t\tACTOR as string,\n\t\tPRICE as string,\n\t\tSPECIAL as integer,\n\t\tCOMMON_PROD_ID as integer,\n\t\tQUAN_IN_STOCK as integer,\n\t\tSALES as integer,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DIMProducts\nDIMProducts filter(CURRENT_RECORD_INDICATOR==1) ~> CRI1\nCRI1 select(mapColumn(\n\t\tPRODUCT_KEY = S_KEY,\n\t\tPRODUCT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nREORDER, select1 join(PROD_ID == PRODUCT_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> join1\njoin1 select(mapColumn(\n\t\tREORDER_ID,\n\t\tPRODUCT_KEY,\n\t\tDATE_LOW,\n\t\tQUAN_LOW,\n\t\tDATE_REORDERED,\n\t\tQUAN_REORDERED,\n\t\tDATE_EXPECTED,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nselect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tREORDER_ID as integer,\n\t\tPRODUCT_KEY as integer,\n\t\tDATE_LOW as date,\n\t\tQUAN_LOW as integer,\n\t\tDATE_REORDERED as date,\n\t\tQUAN_REORDERED as integer,\n\t\tDATE_EXPECTED as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_INSERTED_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tREORDER_ID,\n\t\tPRODUCT_KEY,\n\t\tDATE_LOW,\n\t\tQUAN_LOW,\n\t\tDATE_REORDERED,\n\t\tQUAN_REORDERED,\n\t\tDATE_EXPECTED,\n\t\tROW_INSERTED_DATE,\n\t\tROW_INSERTED_BY\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_reorder_sql')]",
				"[concat(variables('factoryId'), '/datasets/SQL_o_DIM2')]",
				"[concat(variables('factoryId'), '/datasets/ds_fact_reorder_sql')]"
			]
		}
	]
}