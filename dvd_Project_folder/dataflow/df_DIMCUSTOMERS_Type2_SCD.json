{
	"name": "df_DIMCUSTOMERS_Type2_SCD",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cus_test",
						"type": "DatasetReference"
					},
					"name": "cusin"
				},
				{
					"dataset": {
						"referenceName": "sql_customers",
						"type": "DatasetReference"
					},
					"name": "ExistingTarget"
				},
				{
					"dataset": {
						"referenceName": "sql_customers",
						"type": "DatasetReference"
					},
					"name": "Targetforcomparison"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLstart_date_fetch",
						"type": "DatasetReference"
					},
					"name": "StartDateUpdatesource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sql_customers",
						"type": "DatasetReference"
					},
					"name": "InsertNEWRECORD"
				},
				{
					"dataset": {
						"referenceName": "sql_customers",
						"type": "DatasetReference"
					},
					"name": "UPDATEOLDRECORD"
				},
				{
					"dataset": {
						"referenceName": "sql_customers",
						"type": "DatasetReference"
					},
					"name": "OLDRECORDCRI0"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLstart_date_fetch",
						"type": "DatasetReference"
					},
					"name": "EndDatetobeFetchedagain"
				}
			],
			"transformations": [
				{
					"name": "hashkeySRC"
				},
				{
					"name": "CRI1"
				},
				{
					"name": "hashkeyTarget"
				},
				{
					"name": "MAXSURROGATEKEY"
				},
				{
					"name": "Join1"
				},
				{
					"name": "TarappendedtoSINK"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "addSDisRUD"
				},
				{
					"name": "SelectNewRecord"
				},
				{
					"name": "CIR1"
				},
				{
					"name": "UPDATEDRECORD"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "OLDRECORD"
				},
				{
					"name": "joinOLDRECORD"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "URECORDS"
				},
				{
					"name": "filter2"
				},
				{
					"name": "select3"
				},
				{
					"name": "joinforstartdate"
				},
				{
					"name": "fetchstartdate"
				},
				{
					"name": "filter3"
				},
				{
					"name": "select4"
				}
			],
			"script": "parameters{\n\tCOLUMNS as string ('FIRST_NAME,LAST_NAME,ADDRESS1,ADDRESS2,CITY,STATE,EMAIL,CREDIT_CARD_EXPIRATION,USER_NAME,PASSWORD,GENDER')\n}\nsource(output(\n\t\tCUSTOMER_ID as short,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY_NAME as string,\n\t\tREGION as short,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as short,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date 'dd-MM-yyyy',\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date 'dd-MM-yyyy',\n\t\tROW_UPDATED_DATE as date 'dd-MM-yyyy',\n\t\tROW_INSERTED_BY as short,\n\t\tROW_UPDATED_BY as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> cusin\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingTarget\nsource(output(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Targetforcomparison\nsource(output(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StartDateUpdatesource\ncusin derive(columnhashSRC = md5(byNames(split($COLUMNS,','))),\n\t\tDOB_src = md5(DATE_OF_BIRTH),\n\t\tRID_hash_src = md5(ROW_INSERTED_DATE),\n\t\tRUD_hash_src = md5(ROW_UPDATED_DATE)) ~> hashkeySRC\nExistingTarget filter(CURRENT_RECORD_INDICATOR == 1) ~> CRI1\nCRI1 derive(columnhashTarget = md5(byNames(split($COLUMNS,','))),\n\t\tDOB_Tar = md5(DATE_OF_BIRTH),\n\t\tRID_Tar = md5(ROW_INSERTED_DATE),\n\t\tRUD_Tar = md5(ROW_UPDATED_DATE)) ~> hashkeyTarget\nselect4 aggregate(MAXSURROGATEKEY = max(Exists_S_KEY)) ~> MAXSURROGATEKEY\nhashkeySRC, MAXSURROGATEKEY join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nCIR1@CIR1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'Tar_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TarappendedtoSINK\nJoin1, TarappendedtoSINK lookup(CUSTOMER_ID == Tar_CUSTOMER_ID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Tar_CUSTOMER_ID),\n\tdisjoint: false) ~> ConditionalSplit1@(NEWRECORD, EXISTSRECORD)\nConditionalSplit1@NEWRECORD derive(START_DATE = ROW_UPDATED_DATE,\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tCURRENT_RECORD_INDICATOR = 1) ~> addSDisRUD\naddSDisRUD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecord\nTargetforcomparison split(CURRENT_RECORD_INDICATOR == 1,\n\tdisjoint: false) ~> CIR1@(CIR1)\nfilter2, hashkeyTarget exists(columnhashSRC == columnhashTarget\n\t&& URECORDS@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID,\n\tnegate:true,\n\tbroadcast: 'auto')~> UPDATEDRECORD\nUPDATEDRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\njoinforstartdate derive(CURRENT_RECORD_INDICATOR = 1,\n\t\tSTART_DATE = addDays(fetch_START_DATE,1),\n\t\tEND_DATE = toDate('9999-12-31'),\n\t\tROW_UPDATED_DATE = addDays(fetch_START_DATE,1)) ~> derivedColumn1\nderivedColumn1 alterRow(insertIf(1==1)) ~> alterRow1\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OLDRECORD\nfilter3, hashkeyTarget join(OLDRECORD@CUSTOMER_ID == ExistingTarget@CUSTOMER_ID\n\t&& columnhashSRC == columnhashTarget,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> joinOLDRECORD\njoinOLDRECORD filter(isNull(OLDRECORD@CUSTOMER_ID) && CURRENT_RECORD_INDICATOR==1) ~> filter1\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tFIRST_NAME = ExistingTarget@FIRST_NAME,\n\t\tLAST_NAME = ExistingTarget@LAST_NAME,\n\t\tADDRESS1 = ExistingTarget@ADDRESS1,\n\t\tADDRESS2 = ExistingTarget@ADDRESS2,\n\t\tCITY = ExistingTarget@CITY,\n\t\tSTATE = ExistingTarget@STATE,\n\t\tZIP = ExistingTarget@ZIP,\n\t\tCOUNTRY,\n\t\tREGION = ExistingTarget@REGION,\n\t\tEMAIL = ExistingTarget@EMAIL,\n\t\tPHONE = ExistingTarget@PHONE,\n\t\tCREDIT_CARD_TYPE = ExistingTarget@CREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER = ExistingTarget@CREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION = ExistingTarget@CREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME = ExistingTarget@USER_NAME,\n\t\tPASSWORD = ExistingTarget@PASSWORD,\n\t\tDATE_OF_BIRTH = ExistingTarget@DATE_OF_BIRTH,\n\t\tINCOME = ExistingTarget@INCOME,\n\t\tGENDER = ExistingTarget@GENDER,\n\t\tROW_INSERTED_DATE = ExistingTarget@ROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY = ExistingTarget@ROW_INSERTED_BY,\n\t\tROW_UPDATED_BY = ExistingTarget@ROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilter1 derive(END_DATE = currentDate(),\n\t\tSTART_DATE = ExistingTarget@ROW_UPDATED_DATE,\n\t\tCURRENT_RECORD_INDICATOR = 0) ~> derivedColumn2\nselect2 alterRow(updateIf(1==1)) ~> alterRow2\nConditionalSplit1@EXISTSRECORD select(mapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tcolumnhashSRC,\n\t\tDOB_src,\n\t\tRID_hash_src,\n\t\tRUD_hash_src,\n\t\tMAXSURROGATEKEY,\n\t\tTar_S_KEY,\n\t\tTar_CUSTOMER_ID,\n\t\tTar_FIRST_NAME,\n\t\tTar_LAST_NAME,\n\t\tTar_ADDRESS1,\n\t\tTar_ADDRESS2,\n\t\tTar_CITY,\n\t\tTar_STATE,\n\t\tTar_ZIP,\n\t\tTar_COUNTRY,\n\t\tTar_REGION,\n\t\tTar_EMAIL,\n\t\tTar_PHONE,\n\t\tTar_CREDIT_CARD_TYPE,\n\t\tTar_CREDIT_CARD_NUMBER,\n\t\tTar_CREDIT_CARD_EXPIRATION,\n\t\tTar_USER_NAME,\n\t\tTar_PASSWORD,\n\t\tTar_DATE_OF_BIRTH,\n\t\tTar_INCOME,\n\t\tTar_GENDER,\n\t\tTar_ROW_INSERTED_DATE,\n\t\tTar_ROW_UPDATED_DATE,\n\t\tTar_ROW_INSERTED_BY,\n\t\tTar_ROW_UPDATED_BY,\n\t\tTar_START_DATE,\n\t\tTar_END_DATE,\n\t\tTar_CURRENT_RECORD_INDICATOR\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> URECORDS\nURECORDS filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter2\nderivedColumn2 select(mapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID = ExistingTarget@CUSTOMER_ID,\n\t\tEND_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselect1, fetchstartdate join(CUSTOMER_ID == fetch_CUSTOMER_ID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinforstartdate\nStartDateUpdatesource select(mapColumn(\n\t\tfetch_CUSTOMER_ID = CUSTOMER_ID,\n\t\tfetch_START_DATE = START_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fetchstartdate\nOLDRECORD filter(Tar_S_KEY<=MAXSURROGATEKEY && Tar_CURRENT_RECORD_INDICATOR==1) ~> filter3\nhashkeyTarget select(mapColumn(\n\t\tExists_S_KEY = S_KEY,\n\t\teach(match(true()),\n\t\t\t'Exists_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select4\nSelectNewRecord sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> InsertNEWRECORD\nalterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY = COUNTRY_NAME,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> UPDATEOLDRECORD\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tS_KEY as integer,\n\t\tCUSTOMER_ID as integer,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as integer,\n\t\tCOUNTRY as string,\n\t\tREGION as integer,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tCREDIT_CARD_TYPE as integer,\n\t\tCREDIT_CARD_NUMBER as string,\n\t\tCREDIT_CARD_EXPIRATION as string,\n\t\tUSER_NAME as string,\n\t\tPASSWORD as string,\n\t\tDATE_OF_BIRTH as date,\n\t\tINCOME as integer,\n\t\tGENDER as string,\n\t\tROW_INSERTED_DATE as date,\n\t\tROW_UPDATED_DATE as date,\n\t\tROW_INSERTED_BY as integer,\n\t\tROW_UPDATED_BY as integer,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date,\n\t\tCURRENT_RECORD_INDICATOR as integer\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['S_KEY'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tS_KEY,\n\t\tCUSTOMER_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tADDRESS1,\n\t\tADDRESS2,\n\t\tCITY,\n\t\tSTATE,\n\t\tZIP,\n\t\tCOUNTRY,\n\t\tREGION,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tCREDIT_CARD_TYPE,\n\t\tCREDIT_CARD_NUMBER,\n\t\tCREDIT_CARD_EXPIRATION,\n\t\tUSER_NAME,\n\t\tPASSWORD,\n\t\tDATE_OF_BIRTH,\n\t\tINCOME,\n\t\tGENDER,\n\t\tROW_INSERTED_DATE,\n\t\tROW_UPDATED_DATE,\n\t\tROW_INSERTED_BY,\n\t\tROW_UPDATED_BY,\n\t\tSTART_DATE,\n\t\tEND_DATE,\n\t\tCURRENT_RECORD_INDICATOR\n\t)) ~> OLDRECORDCRI0\nselect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCUSTOMER_ID as integer,\n\t\tSTART_DATE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCUSTOMER_ID,\n\t\tSTART_DATE = END_DATE\n\t)) ~> EndDatetobeFetchedagain"
		}
	}
}