{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_Dim_customers_csv",
						"type": "DatasetReference"
					},
					"name": "Dimcustomers"
				},
				{
					"dataset": {
						"referenceName": "ds_Dim_Products_csv",
						"type": "DatasetReference"
					},
					"name": "Dimproducts"
				},
				{
					"dataset": {
						"referenceName": "ds_Fact_orderlines_csv",
						"type": "DatasetReference"
					},
					"name": "Factorderlines"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_output_csv",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "selectDimcustomer"
				},
				{
					"name": "selectDimproducts"
				},
				{
					"name": "join2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          S_KEY as string,",
				"          CUSTOMER_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          ADDRESS1 as string,",
				"          ADDRESS2 as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as string,",
				"          COUNTRY as string,",
				"          REGION as string,",
				"          EMAIL as string,",
				"          PHONE as string,",
				"          CREDIT_CARD_TYPE as string,",
				"          CREDIT_CARD_NUMBER as string,",
				"          CREDIT_CARD_EXPIRATION as string,",
				"          USER_NAME as string,",
				"          PASSWORD as string,",
				"          DATE_OF_BIRTH as string,",
				"          INCOME as string,",
				"          GENDER as string,",
				"          ROW_INSERTED_DATE as string,",
				"          ROW_UPDATED_DATE as string,",
				"          ROW_INSERTED_BY as string,",
				"          ROW_UPDATED_BY as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          CURRENT_RECORD_INDICATOR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dimcustomers",
				"source(output(",
				"          S_KEY as string,",
				"          PRODUCT_ID as string,",
				"          CATEGORY_ID as string,",
				"          CATEGORY_NAME as string,",
				"          TITLE as string,",
				"          ACTOR as string,",
				"          PRICE as string,",
				"          SPECIAL as string,",
				"          COMMON_PROD_ID as string,",
				"          QUAN_IN_STOCK as string,",
				"          SALES as string,",
				"          ROW_INSERTED_DATE as string,",
				"          ROW_UPDATED_DATE as string,",
				"          ROW_INSERTED_BY as string,",
				"          ROW_UPDATED_BY as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          CURRENT_RECORD_INDICATOR as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dimproducts",
				"source(output(",
				"          ORDER_LINE_ID as string,",
				"          ORDER_ID as string,",
				"          CUSTOMER_KEY as string,",
				"          PRODUCT_KEY as string,",
				"          QUANTITY as string,",
				"          ORDER_DATE as string,",
				"          NET_AMOUNT as string,",
				"          TAX_MONEY as string,",
				"          TOTAL_AMOUNT as string,",
				"          ROW_INSERTED_DATE as string,",
				"          ROW_INSERTED_BY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Factorderlines",
				"Factorderlines, selectDimcustomer join(CUSTOMER_KEY == S_KEY,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join1",
				"Dimcustomers select(mapColumn(",
				"          S_KEY,",
				"          CUSTOMER_ID,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          ADDRESS1,",
				"          ADDRESS2,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          COUNTRY,",
				"          REGION,",
				"          EMAIL,",
				"          PHONE,",
				"          CREDIT_CARD_TYPE,",
				"          CREDIT_CARD_NUMBER,",
				"          CREDIT_CARD_EXPIRATION,",
				"          USER_NAME,",
				"          PASSWORD,",
				"          DATE_OF_BIRTH,",
				"          INCOME,",
				"          GENDER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDimcustomer",
				"Dimproducts select(mapColumn(",
				"          S_KEY,",
				"          PRODUCT_ID,",
				"          CATEGORY_ID,",
				"          CATEGORY_NAME,",
				"          TITLE,",
				"          ACTOR,",
				"          PRICE,",
				"          SPECIAL,",
				"          COMMON_PROD_ID,",
				"          QUAN_IN_STOCK,",
				"          SALES",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDimproducts",
				"select3, selectDimproducts join(PRODUCT_KEY == S_KEY,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join2",
				"join1 select(mapColumn(",
				"          ORDER_LINE_ID,",
				"          ORDER_ID,",
				"          CUSTOMER_KEY,",
				"          PRODUCT_KEY,",
				"          QUANTITY,",
				"          ORDER_DATE,",
				"          NET_AMOUNT,",
				"          TAX_MONEY,",
				"          TOTAL_AMOUNT,",
				"          ROW_INSERTED_DATE,",
				"          ROW_INSERTED_BY,",
				"          CUSTOMER_ID,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          ADDRESS1,",
				"          ADDRESS2,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          COUNTRY,",
				"          REGION,",
				"          EMAIL,",
				"          PHONE,",
				"          CREDIT_CARD_TYPE,",
				"          CREDIT_CARD_NUMBER,",
				"          CREDIT_CARD_EXPIRATION,",
				"          USER_NAME,",
				"          PASSWORD,",
				"          DATE_OF_BIRTH,",
				"          INCOME,",
				"          GENDER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"join2 select(mapColumn(",
				"          ORDER_LINE_ID,",
				"          ORDER_ID,",
				"          CUSTOMER_KEY,",
				"          PRODUCT_KEY,",
				"          QUANTITY,",
				"          ORDER_DATE,",
				"          NET_AMOUNT,",
				"          TAX_MONEY,",
				"          TOTAL_AMOUNT,",
				"          ROW_INSERTED_DATE,",
				"          ROW_INSERTED_BY,",
				"          CUSTOMER_ID,",
				"          FIRST_NAME,",
				"          LAST_NAME,",
				"          ADDRESS1,",
				"          ADDRESS2,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          COUNTRY,",
				"          REGION,",
				"          EMAIL,",
				"          PHONE,",
				"          CREDIT_CARD_TYPE,",
				"          CREDIT_CARD_NUMBER,",
				"          CREDIT_CARD_EXPIRATION,",
				"          USER_NAME,",
				"          PASSWORD,",
				"          DATE_OF_BIRTH,",
				"          INCOME,",
				"          GENDER,",
				"          PRODUCT_ID,",
				"          CATEGORY_ID,",
				"          CATEGORY_NAME,",
				"          TITLE,",
				"          ACTOR,",
				"          PRICE,",
				"          SPECIAL,",
				"          COMMON_PROD_ID,",
				"          QUAN_IN_STOCK,",
				"          SALES",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}